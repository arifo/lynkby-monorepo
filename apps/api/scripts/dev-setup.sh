#!/bin/bash

# Lynkby API Development Setup Script
# This script helps you set up your development environment quickly and securely

set -e

echo "🚀 Setting up Lynkby API development environment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "package.json" ] || [ ! -f "wrangler.toml" ]; then
    print_error "Please run this script from the apps/api directory"
    exit 1
fi

# Create .env.local if it doesn't exist
if [ ! -f ".env.local" ]; then
    print_info "Creating .env.local from template..."
    cp env.template .env.local
    print_status "Created .env.local"
else
    print_warning ".env.local already exists"
fi

# Create .dev.vars if it doesn't exist
if [ ! -f ".dev.vars" ]; then
    print_info "Creating .dev.vars from template..."
    cp env.template .dev.vars
    print_status "Created .dev.vars"
else
    print_warning ".dev.vars already exists"
fi

# Create wrangler.toml if it doesn't exist
if [ ! -f "wrangler.toml" ]; then
    print_info "Creating wrangler.toml from template..."
    cp wrangler.template.toml wrangler.toml
    print_status "Created wrangler.toml"
else
    print_warning "wrangler.toml already exists"
fi

# Function to prompt for environment variable
prompt_for_var() {
    local var_name=$1
    local description=$2
    local default_value=$3
    local is_secret=$4
    
    echo ""
    print_info "$description"
    
    if [ "$is_secret" = "true" ]; then
        echo -n "Enter $var_name (will be hidden): "
        read -s value
        echo ""
    else
        if [ -n "$default_value" ]; then
            echo -n "Enter $var_name [$default_value]: "
        else
            echo -n "Enter $var_name: "
        fi
        read value
    fi
    
    # Use default if empty
    if [ -z "$value" ] && [ -n "$default_value" ]; then
        value="$default_value"
    fi
    
    echo "$value"
}

# Interactive setup for key variables
echo ""
print_info "Let's configure your development environment variables:"
echo "Press Enter to skip any variable you don't want to set right now"

# Core configuration
NODE_ENV=$(prompt_for_var "NODE_ENV" "Environment (development/staging/production)" "development" false)
APP_API_BASE=$(prompt_for_var "APP_API_BASE" "App API base URL" "http://localhost:3001" false)
REVALIDATE_SECRET=$(prompt_for_var "REVALIDATE_SECRET" "Revalidation secret" "dev-secret-change-me" false)

# Authentication
JWT_SECRET=$(prompt_for_var "JWT_SECRET" "JWT secret (min 32 chars)" "dev-jwt-secret-must-be-at-least-32-characters-long" true)
JWT_EXPIRES_IN=$(prompt_for_var "JWT_EXPIRES_IN" "JWT expiration time" "7d" false)

# Sentry
SENTRY_DSN=$(prompt_for_var "SENTRY_DSN" "Sentry DSN (optional)" "" false)

# Database
DATABASE_URL=$(prompt_for_var "DATABASE_URL" "Database URL (PostgreSQL)" "" false)
DIRECT_URL=$(prompt_for_var "DIRECT_URL" "Direct database URL (for migrations)" "" false)

# External services
STRIPE_SECRET_KEY=$(prompt_for_var "STRIPE_SECRET_KEY" "Stripe secret key (optional)" "" true)
STRIPE_WEBHOOK_SECRET=$(prompt_for_var "STRIPE_WEBHOOK_SECRET" "Stripe webhook secret (optional)" "" true)
TIKTOK_CLIENT_KEY=$(prompt_for_var "TIKTOK_CLIENT_KEY" "TikTok client key (optional)" "" true)
TIKTOK_CLIENT_SECRET=$(prompt_for_var "TIKTOK_CLIENT_SECRET" "TikTok client secret (optional)" "" true)

# Update .env.local
print_info "Updating .env.local..."
cat > .env.local << EOF
# Lynkby API Development Environment
# Generated by dev-setup.sh on $(date)

# App Configuration
NODE_ENV=$NODE_ENV
APP_API_BASE=$APP_API_BASE
REVALIDATE_SECRET=$REVALIDATE_SECRET

# Authentication
JWT_SECRET=$JWT_SECRET
JWT_EXPIRES_IN=$JWT_EXPIRES_IN

# Sentry Configuration
SENTRY_DSN=$SENTRY_DSN

# Database Configuration
DATABASE_URL=$DATABASE_URL
DIRECT_URL=$DIRECT_URL

# External Services
STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY
STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET
TIKTOK_CLIENT_KEY=$TIKTOK_CLIENT_KEY
TIKTOK_CLIENT_SECRET=$TIKTOK_CLIENT_SECRET
EOF

# Update .dev.vars
print_info "Updating .dev.vars..."
cat > .dev.vars << EOF
# Lynkby API Development Environment Variables
# Generated by dev-setup.sh on $(date)

# App Configuration
NODE_ENV=$NODE_ENV
APP_API_BASE=$APP_API_BASE
REVALIDATE_SECRET=$REVALIDATE_SECRET

# Authentication
JWT_SECRET=$JWT_SECRET
JWT_EXPIRES_IN=$JWT_EXPIRES_IN

# Sentry Configuration
SENTRY_DSN=$SENTRY_DSN

# Database Configuration
DATABASE_URL=$DATABASE_URL
DIRECT_URL=$DIRECT_URL

# External Services
STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY
STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET
TIKTOK_CLIENT_KEY=$TIKTOK_CLIENT_KEY
TIKTOK_CLIENT_SECRET=$TIKTOK_CLIENT_SECRET
EOF

print_status "Environment files updated!"

# Create a quick-start script
print_info "Creating quick-start script..."
cat > dev-start.sh << 'EOF'
#!/bin/bash

# Quick start script for development
echo "🚀 Starting Lynkby API development server..."

# Check if environment is properly configured
if [ ! -f ".env.local" ]; then
    echo "❌ .env.local not found. Run ./scripts/dev-setup.sh first"
    exit 1
fi

# Check if wrangler is installed
if ! command -v wrangler &> /dev/null; then
    echo "❌ Wrangler CLI not found. Install with: npm install -g wrangler"
    exit 1
fi

# Start development server
echo "✅ Starting development server on http://localhost:8787"
echo "📊 Health check: http://localhost:8787/_health"
echo "🧪 Sentry test: http://localhost:8787/debug-sentry"
echo ""
echo "Press Ctrl+C to stop"
echo ""

pnpm dev
EOF

chmod +x dev-start.sh

# Create environment validation script
print_info "Creating environment validation script..."
cat > scripts/validate-env.sh << 'EOF'
#!/bin/bash

# Environment validation script
echo "🔍 Validating environment configuration..."

# Check required files
required_files=(".env.local" ".dev.vars" "wrangler.toml")
for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "✅ $file exists"
    else
        echo "❌ $file missing"
    fi
done

echo ""

# Check if .env.local is in .gitignore
if grep -q ".env.local" .gitignore; then
    echo "✅ .env.local is properly ignored by Git"
else
    echo "❌ .env.local is NOT ignored by Git - this is a security risk!"
fi

# Check if wrangler.toml is in .gitignore
if grep -q "wrangler.toml" .gitignore; then
    echo "✅ wrangler.toml is properly ignored by Git"
else
    echo "❌ wrangler.toml is NOT ignored by Git - this is a security risk!"
fi

echo ""

# Show environment status
echo "📋 Environment Status:"
if [ -f ".env.local" ]; then
    echo "   NODE_ENV: $(grep '^NODE_ENV=' .env.local | cut -d'=' -f2 || echo 'not set')"
    echo "   Database: $(if grep -q '^DATABASE_URL=' .env.local; then echo 'configured'; else echo 'not configured'; fi)"
    echo "   JWT: $(if grep -q '^JWT_SECRET=' .env.local; then echo 'configured'; else echo 'not configured'; fi)"
    echo "   Sentry: $(if grep -q '^SENTRY_DSN=' .env.local; then echo 'configured'; else echo 'not configured'; fi)"
else
    echo "   Environment file not found"
fi

echo ""
echo "🎯 Next steps:"
echo "   1. Edit .env.local if you need to change any values"
echo "   2. Run: ./dev-start.sh"
echo "   3. Or run manually: pnpm dev"
EOF

chmod +x scripts/validate-env.sh

print_status "Development setup complete!"
echo ""
echo "🎯 What was created:"
echo "   ✅ .env.local - Your local environment variables"
echo "   ✅ .dev.vars - Wrangler development variables"
echo "   ✅ wrangler.toml - Wrangler configuration"
echo "   ✅ dev-start.sh - Quick start script"
echo "   ✅ scripts/validate-env.sh - Environment validation"
echo ""
echo "🚀 To start development:"
echo "   ./dev-start.sh"
echo ""
echo "🔍 To validate your setup:"
echo "   ./scripts/validate-env.sh"
echo ""
echo "📝 To edit environment variables:"
echo "   nano .env.local"
echo ""
print_warning "Remember: Never commit .env.local, .dev.vars, or wrangler.toml to Git!"
