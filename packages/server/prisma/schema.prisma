// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(255)
  username  String?  @unique @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  isVerified Boolean @default(false)
  
  // Relations
  magicLinkTokens MagicLinkToken[]
  sessions        UserSession[]
  page            Page?
  
  @@map("users")
}

model Page {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  displayName String
  bio         String?
  avatarUrl   String?
  links       Link[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("pages")
}

model Link {
  id        String   @id @default(cuid())
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String
  label     String
  url       String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("links")
}

model MagicLinkToken {
  id        String   @id @default(cuid())
  email     String   @db.VarChar(255)
  tokenHash String   @unique // Store only hashed tokens
  createdAt DateTime @default(now())
  expiresAt DateTime
  usedAt    DateTime? // Track when token was consumed
  ipCreatedFrom String? // IP address where token was created
  uaCreatedFrom String? // User agent where token was created
  redirectPath String? // Where to redirect after verification
  
  // Relations
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
  
  @@map("magic_link_tokens")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String   @unique // Store only hashed tokens
  expiresAt DateTime
  createdAt DateTime @default(now())
  lastUsedAt DateTime @default(now())
  revokedAt DateTime? // Track session revocation
  ipAddress String? // IP address where session was created
  userAgent String? // User agent where session was created
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}
