generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique @db.VarChar(255)
  username        String?          @unique @db.VarChar(50)
  displayName     String?
  avatarUrl       String?          @db.VarChar(500)
  bio             String?          @db.VarChar(280)
  plan            Plan             @default(FREE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastLoginAt     DateTime?
  isVerified      Boolean          @default(true)
  otpTokens       OtpToken[]
  page            Page?
  sessions        UserSession[]
  setup           SetupState?

  @@map("users")
}

enum Plan {
  FREE
  PRO
}

model Page {
  id           String   @id @default(cuid())
  userId       String   @unique
  layout       Layout   @default(LINKS_LIST)
  theme        String   @default("classic") @db.VarChar(50)
  published    Boolean  @default(true)
  viewsAllTime Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  links        Link[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("pages")
}

model Link {
  id        String   @id @default(cuid())
  pageId    String
  title     String   @db.VarChar(80)
  url       String   @db.VarChar(2048)
  position  Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("links")
  @@index([pageId, position], map: "links_pageId_position_idx")
}

enum Layout {
  LINKS_LIST
}

model OtpToken {
  id            String    @id @default(cuid())
  email         String    @db.VarChar(255)
  codeHash      String    @unique
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
  consumedAt    DateTime?
  attempts      Int       @default(0)
  ipCreatedFrom String?
  uaCreatedFrom String?
  user          User      @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)

  @@map("otp_tokens")
  @@index([email], map: "otp_tokens_email_idx")
  @@index([expiresAt], map: "otp_tokens_expiresAt_idx")
  @@index([consumedAt], map: "otp_tokens_consumedAt_idx")
}

model UserSession {
  id         String    @id @default(cuid())
  userId     String
  tokenHash  String    @unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime  @default(now())
  revokedAt  DateTime?
  ipAddress  String?
  userAgent  String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_sessions")
  @@index([userId], map: "user_sessions_userId_idx")
  @@index([expiresAt], map: "user_sessions_expiresAt_idx")
}


model SetupState {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstSaveCompleted    Boolean  @default(false)
  checklist             Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("setup_states")
  @@index([userId], map: "setup_states_userId_idx")
}
